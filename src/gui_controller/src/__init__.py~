#!/usr/bin/env python

import sys
import os
from functools import partial

import rospy
import rospkg
from geometry_msgs.msg import Twist
from geometry_msgs.msg import Vector3
from 

from PyQt4.QtGui import *
from PyQt4.QtCore import *
from PyQt4 import uic

class GuiController(QMainWindow):
    def __init__(self):
        super(QMainWindow, self).__init__()
	
	self.twistController = TwistController()

	ui_file = os.path.join(rospkg.RosPack().get_path('gui_controller'), 'resource', 'gui_controller.ui')
	
	self.ui = uic.loadUi(ui_file)
        self.ui.show()
	
	linearSpeed = .5
	angularSpeed = 2
	
	self.ui.goForward_button.pressed.connect(partial(self.twistController.move, linearSpeed, 0))
	self.ui.goForward_button.released.connect(partial(self.twistController.move, 0, 0))
	self.ui.goBackward_button.pressed.connect(partial(self.twistController.move, -linearSpeed, 0))
	self.ui.goBackward_button.released.connect(partial(self.twistController.move, 0, 0))
	self.ui.turnLeft_button.pressed.connect(partial(self.twistController.move, 0, angularSpeed))
	self.ui.turnLeft_button.released.connect(partial(self.twistController.move, 0, 0))
	self.ui.turnRight_button.pressed.connect(partial(self.twistController.move, 0, -angularSpeed))
	self.ui.turnRight_button.released.connect(partial(self.twistController.move, 0, 0))


    def handleButtonClicked(self):
	self.twistController.move(.1, 0)


class TwistController():
    def __init__(self):
	self.publisher = rospy.Publisher('cmd_vel', Twist)
        self.twist = Twist(Vector3(0, 0, 0), Vector3(0, 0, 0))
	

    def move(self, linear, angular):
	self.twist.linear.x = linear
	self.twist.angular.z = angular
	rospy.loginfo(str(self.twist))
	self.publisher.publish(self.twist)


if __name__ == '__main__':
    try:
        rospy.init_node('gui_controller', anonymous = True)
        
	app = QApplication(sys.argv)
	guiController = GuiController()
	sys.exit(app.exec_())
	
    except rospy.ROSInterruptException:
	pass
