/********************************************************************
 * @filename    MD25.cpp
 * @author      Thomas B. Joergensen (thomas.bal.jorgensen@gmail.com)
 * @date        06 FEB 2012
 * @version     1.0
 * @target      mbed (NXP LPC1768 - ARM Cortex M3 - 32-bit)
 *
 * @desciption  A library for interacting with the MD25 DC motor
 *              controller. Find more at:
 *              http://www.robot-electronics.co.uk/htm/md25tech.htm
 *              http://www.robot-electronics.co.uk/htm/md25i2c.htm
 *******************************************************************/

/* Includes */
#include "md25.h"

/*** CONSTRUCTOR AND DESTRUCTOR ***/

MD25::MD25() : twist_linear(0), twist_angular(0), mode(0), hex_vel1(0x80), hex_vel2(0x80){
    this->name_port = "/dev/ttyUSB0";
    

    /*Open and config port*/
    int fd;                                   /* File descriptor for the port */


    fd = open(name_port, O_RDWR | O_NOCTTY );


    if (fd < 0) {                                              /* Could not open the port */
     fprintf(stderr, "open_port: Unable to open /dev/ttyUSB1 - %s\n", strerror(errno));
    }
   port_opened = fd;
   struct termios options;
                                     /* Get the current options for the port */
   tcgetattr(port_opened, &options);
   cfsetispeed(&options, B38400);                 /* Set the baud rates to 38400 */
   cfsetospeed(&options, B38400);
     
                                   /* Enable the receiver and set local mode */
   options.c_cflag |= (CLOCAL | CREAD);
   options.c_cflag &= ~PARENB; /* Mask the character size to 8 bits, no parity */
   options.c_cflag &= ~CSTOPB; /* Two stop bits*/
   options.c_cflag &= ~CSIZE;
   options.c_cflag |=  CS8;                              /* Select 8 data bits */
   options.c_cflag &= ~CRTSCTS;               /* Disable hardware flow control */

                                 /* Enable data to be processed as raw input */
   //options.c_lflag &= ~(ICANON | ECHO | ISIG);
   options.c_lflag &= ~(ISIG);
   options.c_cc[VMIN]  = 4;
   options.c_cc[VTIME] = 0;
     
                                        /* Set the new options for the port */
   tcsetattr(port_opened, TCSANOW, &options);

   tcflush(port_opened, TCIOFLUSH); // Clear both the input and output buffers.
   

}

MD25::~MD25(void) {close(port_opened);};

/*** CONTROL METHODS ***/

/**
 * Set mode of operation.
 *
 * @param mode      Set mode of operation (0 - 3) (default: 0).
 */
int MD25::set_mode(int mode) {
    /* Check input is valid */
    if (mode < 0 || mode > 3) return -1;

    char command[3] = {SYNC_BYTE, CMD_SET_MODE, (char)mode};
    
    /* Set mode */
    if (write(port_opened, command, 3) == -1) return -1;
    
    /* Set mode variable */
    this->mode = mode;
    
    /* Return success */
    return 0;
}

int MD25::get_mode(){
	int data;
	char command[2] = {SYNC_BYTE, CMD_GET_MODE};
    tcflush(port_opened, TCOFLUSH);
	if(write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -1;
	cout << "Current mode : " << data << endl;
	return data;
}

/**
 * Get encoder 1 position.
 */
int MD25::get_encoder1() {
    /* Variables */
    char data[4];
    int position;
    char command[2] = {SYNC_BYTE, CMD_GET_ENC1};
    tcflush(port_opened, TCOFLUSH);
    if (write(port_opened, command, 2) == -1) return -1;
    /* Get encoder bytes */
    //usleep(10000);
    if (read(port_opened, &data[0], 4) == -1) return -2;
    std::cout << "Codeur 1 : " << (int) data[0] << " " << (int) data[1] << " " << (int) data[2] << " " << (int) data[3] << std::endl;
    /* Combine the position bytes */
    position = (data[0]<<24) | (data[1]<<16) | (data[2]<<8) | data[3];
    
    /* Return position */
    return position;
}

/**
 * Get encoder 2 position.
 */
int MD25::get_encoder2() {
    /* Variables */
    char data[4];
    int position;
    char command[2] = {SYNC_BYTE, CMD_GET_ENC2};
    tcflush(port_opened, TCOFLUSH);
    if (write(port_opened, command, 2) == -1) return -1;
    /* Get encoder bytes */
    //usleep(100);
    if (read(port_opened, &data[0], 4) == -1) return -2;
    std::cout<< "Codeur 2 : " << (int)data[0]<<" "<<(int)data[1]<<" "<<(int)data[2]<<" "<<(int)data[3]<<std::endl;
    /* Combine the position bytes */
    position = (data[0]<<24) | (data[1]<<16) | (data[2]<<8) | data[3];
    /* Return position */
    return position;
}


/**
 * Reset the encoder registers.
 */
int MD25::reset_encoders() {
    /* Variables */
    char command[2] = {SYNC_BYTE, CMD_RESET_ENCODERS};
    /* Reset encoders */
    if (write(port_opened, command, 2) == -1) return -1;
    /* Return success */
    return 0;
}

/**
 *  Get current through motor 1
 */
 
int MD25::get_current1(){
	char command[2] = {SYNC_BYTE, CMD_GET_CURRENT1};
	int data;
	tcflush(port_opened, TCOFLUSH);
	if (write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -2;
	cout << "Current through motor 1 : " << data << endl;
	return data;
}

/**
 *  Get current through motor 2
 */
 
int MD25::get_current2(){
	char command[2] = {SYNC_BYTE, CMD_GET_CURRENT2};
	int data;
	tcflush(port_opened, TCOFLUSH);
	if (write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -2;
	cout << "Current through motor 2 : " << data << endl;
	return data;
}


/**
 * Enable/disable 2 sec timeout of motors when no I2C comms (default: enabled).
 *
 * @param enabled   enable = 1 | disable = 0.
 */
int MD25::set_timeout(bool enabled) {
    /* Variables */
    char command[2]={SYNC_BYTE, 0};
    
    /* Set data */
    if (enabled) {
        command[1] = CMD_ENABLE_TIMEOUT;
    } else {
        command[1] = CMD_DISABLE_TIMEOUT;
    }

    /* Reset encoders */
    if (write(port_opened, command, 2) == -1) return -1;

    /* Return success */
    return 0;
}

/**
 * Get the speed of motor 1
 */
 
int MD25::get_speed1(){
	char command[2] = {SYNC_BYTE, CMD_GET_SPEED1};
	char data;
	tcflush(port_opened, TCOFLUSH);
	if (write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -2;
	cout << "Speed motor 1 : " << (int)data <<  endl;
	return data;
}
	
/**
 * Get the speed of motor 2
 */
 
int MD25::get_speed2(){
	char command[2] = {SYNC_BYTE, CMD_GET_SPEED2};
	char data;
	tcflush(port_opened, TCOFLUSH);
	if (write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -2;
	cout << "Speed motor 2 : " << (int) data << endl;
	return data;
}


/**
 * Set the speed of motor 1.
 *
 * @param speed     Faster the higher a number (mode 0: 0 -> 255 | mode 1: -128 to 127).
 */
int MD25::set_speed1(int speed) {
    /* Check input is valid */
    if (mode == 0) {
        if (speed < 0 || speed >255) return -1;
    } 
	else if (mode == 1) {
        if (speed < -128 || speed > 127) return -1;
    } 
	else if (mode == 2) {
		if (speed < 0 || speed > 255) return -1;
	}
	  
	else if (mode == 3) {
		if (speed < -128 || speed > 127) return -1;
	}
	else {
        return 0;
    }
    
    /* Variable */
    char command[3] = {SYNC_BYTE, CMD_SET_SPEED1,(char)speed};
       
    /* Set speed */
    if (write(port_opened, command, 3) == -1) return -1;
    
    /* Return success */
    return 0;
}



/**
 * Set the speed of motor 2.
 *
 * @param speed     Faster the higher a number (mode 0: 0 -> 255 | mode 1: -128 to 127).
 */
int MD25::set_speed2(int speed) {
    /* Check input is valid */
    if (mode == 0) {
        if (speed < 0 || speed >255) return -1;
    } 
	else if (mode == 1) {
        if (speed < -128 || speed > 127) return -1;
    } 
	else if (mode == 2) {
		if (speed < 0 || speed > 255) return -1;
	}
	  
	else if (mode == 3) {
		if (speed < -128 || speed > 127) return -1;
	}
	else {
        return 0;
    }
    
    /* Variable */
    char command[3] = {SYNC_BYTE, CMD_SET_SPEED2,(char)speed};
       
    /* Set speed */
    if (write(port_opened, command, 3) == -1) return -1;
    
    /* Return success */
    return 0;
}
/**
 * Set the desired acceleration rate.
 *
 * if new speed > current speed:
 *      steps = (new speed - current speed) / acceleration register 
 * if new speed < current speed:
 *      steps = (current speed - new speed) / acceleration register
 * time = steps * 25ms 
 * Example: 
 *      Time/step: 25ms | Current speed: 0 | New speed: 255 | Steps: 255 | Acceleration time: 6.375s.
 * @param acceleration  Faster the higher a number (default: 5).
 */
int MD25::set_acceleration(int acceleration) {
    /* Check input is valid */    
    if (acceleration < 0 || acceleration > 255) return -1;
    
    /* Set data */
    char command[3] = {SYNC_BYTE, CMD_SET_ACCELERATION, (char)acceleration};
    
    /* Set acceleration */
    if (write(port_opened, command, 3) == -1) return -1;
    
    /* Return success */
    return 0;
}

/**
 * Get the set desired acceleration rate.
 *
 * if new speed > current speed:
 *      steps = (new speed - current speed) / acceleration register 
 * if new speed < current speed:
 *      steps = (current speed - new speed) / acceleration register
 * time = steps * 25ms 
 * Example: 
 *      Time/step: 25ms | Current speed: 0 | New speed: 255 | Steps: 255 | Acceleration time: 6.375s.
 * @return  Faster the higher a number (default: 5).
 */
int MD25::get_acceleration() {
    char command[2] = {SYNC_BYTE, CMD_GET_ACCELERATION};
    char data;
    tcflush(port_opened, TCOFLUSH);
    if (write(port_opened, command, 2) == -1) return -1;
    //usleep(10000);
    if (read(port_opened, &data, 1) == -1) return -2;
    cout << "Acceleration : " << (int)data << endl;
    return data;
}

/**
 * Get the current voltage
 */

int MD25::get_volt(){
	char command[2] = {SYNC_BYTE, CMD_GET_VOLT};
	char data;
	tcflush(port_opened, TCOFLUSH);
	if (write(port_opened, command, 2) == -1) return -1;
	//usleep(10000);
	if (read(port_opened, &data, 1) == -1) return -2;
	cout << "Voltage : " << (int)data << endl;
	return data;
}

void MD25::get_state(){
	get_speed1();
	get_speed2();
	get_encoder1();
	get_encoder2();
	get_volt();
	usleep(100);
}

void MD25::set_motor(float lin, float ang){
	float vit_1 = (lin-SEMI_AXE_LENGTH*ang )/WHEEL_DIAMETER;
	float vit_2 = (lin+SEMI_AXE_LENGTH*ang )/WHEEL_DIAMETER;
	hex_vel1 = 0x80 + (int) vit_1;
	hex_vel2 = 0x80 + (int) vit_2;
	set_speed1(hex_vel1);
	set_speed2(hex_vel2);
}

void MD25::twistCb(const geometry_msgs::Twist& msg){
	geometry_msgs::Twist twist = msg;
	this-> twist_linear = twist.linear.x;
	this-> twist_angular = twist.angular.z;


}



void MD25::spin(){
	ros::spin();

}

int main(int argc, char **argv){
    ros::init(argc, argv, "md25");
	ros::NodeHandle n;
	MD25 m;
	m.set_mode(0);   
	m.set_timeout(true);
	ros :: Subscriber sub = n.subscribe("cmd_vel", 1, &MD25::twistCb, &m);
	ros::Rate loop_rate(5);
	loop_rate.sleep();

// ecrire traitement des valeurs twist
	while(ros::ok()){
		m.get_state();
		m.set_motor();
		ros::spinOnce();
		loop_rate.sleep();
	}
	ros::spin();
    return 0;
    
    }
